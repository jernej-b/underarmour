*, *::after, *::before{
        box-sizing: inherit;
}
 
html{
        box-sizing: border-box;
} 

* {
    margin: 0;
    padding: 0;

}
body {
    font-family: "Cormorant Garamond", serif;
	font-size: 1.4rem;
	font-weight: 400;
	color: #302F38;
	background-color: #d5d5d5;
    /*background-size: cover;*/
    /*background-position: center;*/
    height: 100vh;
    overflow: auto;
    padding-top: 25px; 
	line-height: 1.2;
	/*-webkit-font-smoothing: antialiased;*/
}
.container {
    display: flex;
    flex-direction: column;
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    width: 900px;
    min-height: 700px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    margin: 0 auto;
    overflow: hidden; /* Ensure inner content doesn't escape */
    position: relative; /* Ensure absolute elements are relative to this */
}

.inner {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%; /* Adjust as needed to fit content */
    overflow: auto; /* Allows scrolling if content is too large */
    gap: 10px; /* Add spacing between elements if needed */
}

.field {
    flex: 1;
    overflow: auto; /* Prevent content overflow */
    padding: 10px; /* Optional: Add padding for better layout */
}

svg {
    max-width: 100%;
    height: auto; /* Responsive SVG scaling */
    border: 1px solid black;
    margin: 20px auto;
}
/*M, 2510, 5050
C, 1887, 4943, 1032, 4639, 588, 4367
C, 588, 4367, 521, 4326, 521, 4326
C, 521, 4326, 526, 4280, 526, 4280
C, 552, 4047, 637, 3832, 788, 3620
C, 880, 3490, 1096, 3275, 1252, 3159
C, 1447, 3014, 1701, 2863, 1898, 2774
C, 1943, 2754, 1980, 2734, 1980, 2731
C, 1979, 2728, 1904, 2688, 1812, 2643
C, 1194, 2341, 763, 1931, 597, 1488
C, 567, 1410, 533, 1256, 529, 1185
C, 526, 1135, 526, 1135, 575, 1102
C, 742, 992, 1215, 783, 1612, 645
C, 1908, 541, 2479, 401, 2607, 400
C, 2607, 400, 2639, 400, 2639, 400
C, 2639, 400, 2642, 1178, 2642, 1178
C, 2646, 1954, 2646, 1955, 2668, 2030
C, 2700, 2134, 2767, 2271, 2830, 2359
C, 2889, 2442, 2867, 2438, 3040, 2400
C, 3281, 2347, 3598, 2299, 3870, 2275
C, 4113, 2252, 4650, 2244, 4891, 2259
C, 5253, 2281, 5564, 2321, 5880, 2387
C, 5976, 2407, 6067, 2425, 6081, 2427
C, 6102, 2431, 6113, 2424, 6137, 2393
C, 6188, 2329, 6257, 2209, 6289, 2129
C, 6349, 1976, 6350, 1962, 6350, 1144
C, 6350, 1144, 6350, 400, 6350, 400
C, 6350, 400, 6381, 400, 6381, 400
C, 6476, 400, 6914, 499, 7195, 585
C, 7581, 702, 8138, 936, 8392, 1088
C, 8392, 1088, 8471, 1134, 8471, 1134
C, 8471, 1134, 8465, 1190, 8465, 1190
C, 8437, 1444, 8328, 1691, 8143, 1920
C, 8071, 2009, 7893, 2183, 7795, 2262
C, 7616, 2404, 7357, 2562, 7127, 2670
C, 7063, 2700, 7010, 2728, 7010, 2731
C, 7010, 2734, 7052, 2756, 7103, 2779
C, 7407, 2918, 7743, 3140, 7957, 3344
C, 8257, 3630, 8423, 3935, 8464, 4275
C, 8464, 4275, 8470, 4325, 8470, 4325
C, 8470, 4325, 8412, 4361, 8412, 4361
C, 8167, 4517, 7591, 4758, 7150, 4890
C, 6909, 4962, 6577, 5039, 6393, 5064
C, 6393, 5064, 6351, 5070, 6351, 5070
C, 6351, 5070, 6348, 4293, 6348, 4293
C, 6345, 3520, 6345, 3515, 6322, 3435
C, 6294, 3334, 6227, 3196, 6160, 3102
C, 6118, 3042, 6104, 3029, 6087, 3033
C, 5495, 3164, 5063, 3211, 4465, 3211
C, 4295, 3210, 4144, 3208, 4130, 3206
C, 4116, 3204, 4056, 3199, 3995, 3195
C, 3677, 3176, 3261, 3115, 2903, 3033
C, 2860, 3023, 2726, 3248, 2673, 3417
C, 2673, 3417, 2645, 3505, 2645, 3505
C, 2645, 3505, 2642, 4288, 2642, 4288
C, 2640, 4892, 2636, 5070, 2627, 5069
C, 2620, 5069, 2568, 5060, 2510, 5050
C, 2510, 5050, 2510, 5050, 2510, 5050
M, 4775, 3039
C, 5025, 3017, 5287, 2954, 5498, 2865
C, 5606, 2819, 5750, 2742, 5750, 2729
C, 5750, 2716, 5471, 2583, 5375, 2550
C, 5237, 2502, 5076, 2463, 4918, 2439
C, 4726, 2409, 4302, 2406, 4110, 2433
C, 3949, 2456, 3791, 2491, 3654, 2536
C, 3547, 2571, 3240, 2714, 3240, 2728
C, 3240, 2739, 3367, 2809, 3465, 2853
C, 3683, 2950, 3953, 3017, 4215, 3039
C, 4352, 3051, 4641, 3051, 4775, 3039
C, 4775, 3039, 4775, 3039, 4775, 3039
Flutter Clipper
  @override
  Path getClip(Size size) {
    Path path = Path();
    final double _xScaling = size.width / 414;
    final double _yScaling = size.height / 896;
    path.lineTo(2510 * _xScaling,5050 * _yScaling);
    path.cubicTo(1887 * _xScaling,4943 * _yScaling,1032 * _xScaling,4639 * _yScaling,588 * _xScaling,4367 * _yScaling,);
    path.cubicTo(588 * _xScaling,4367 * _yScaling,521 * _xScaling,4326 * _yScaling,521 * _xScaling,4326 * _yScaling,);
    path.cubicTo(521 * _xScaling,4326 * _yScaling,526 * _xScaling,4280 * _yScaling,526 * _xScaling,4280 * _yScaling,);
    path.cubicTo(552 * _xScaling,4047 * _yScaling,637 * _xScaling,3832 * _yScaling,788 * _xScaling,3620 * _yScaling,);
    path.cubicTo(880 * _xScaling,3490 * _yScaling,1096 * _xScaling,3275 * _yScaling,1252 * _xScaling,3159 * _yScaling,);
    path.cubicTo(1447 * _xScaling,3014 * _yScaling,1701 * _xScaling,2863 * _yScaling,1898 * _xScaling,2774 * _yScaling,);
    path.cubicTo(1943 * _xScaling,2754 * _yScaling,1980 * _xScaling,2734 * _yScaling,1980 * _xScaling,2731 * _yScaling,);
    path.cubicTo(1979 * _xScaling,2728 * _yScaling,1904 * _xScaling,2688 * _yScaling,1812 * _xScaling,2643 * _yScaling,);
    path.cubicTo(1194 * _xScaling,2341 * _yScaling,763 * _xScaling,1931 * _yScaling,597 * _xScaling,1488 * _yScaling,);
    path.cubicTo(567 * _xScaling,1410 * _yScaling,533 * _xScaling,1256 * _yScaling,529 * _xScaling,1185 * _yScaling,);
    path.cubicTo(526 * _xScaling,1135 * _yScaling,526 * _xScaling,1135 * _yScaling,575 * _xScaling,1102 * _yScaling,);
    path.cubicTo(742 * _xScaling,992 * _yScaling,1215 * _xScaling,783 * _yScaling,1612 * _xScaling,645 * _yScaling,);
    path.cubicTo(1908 * _xScaling,541 * _yScaling,2479 * _xScaling,401 * _yScaling,2607 * _xScaling,400 * _yScaling,);
    path.cubicTo(2607 * _xScaling,400 * _yScaling,2639 * _xScaling,400 * _yScaling,2639 * _xScaling,400 * _yScaling,);
    path.cubicTo(2639 * _xScaling,400 * _yScaling,2642 * _xScaling,1178 * _yScaling,2642 * _xScaling,1178 * _yScaling,);
    path.cubicTo(2646 * _xScaling,1954 * _yScaling,2646 * _xScaling,1955 * _yScaling,2668 * _xScaling,2030 * _yScaling,);
    path.cubicTo(2700 * _xScaling,2134 * _yScaling,2767 * _xScaling,2271 * _yScaling,2830 * _xScaling,2359 * _yScaling,);
    path.cubicTo(2889 * _xScaling,2442 * _yScaling,2867 * _xScaling,2438 * _yScaling,3040 * _xScaling,2400 * _yScaling,);
    path.cubicTo(3281 * _xScaling,2347 * _yScaling,3598 * _xScaling,2299 * _yScaling,3870 * _xScaling,2275 * _yScaling,);
    path.cubicTo(4113 * _xScaling,2252 * _yScaling,4650 * _xScaling,2244 * _yScaling,4891 * _xScaling,2259 * _yScaling,);
    path.cubicTo(5253 * _xScaling,2281 * _yScaling,5564 * _xScaling,2321 * _yScaling,5880 * _xScaling,2387 * _yScaling,);
    path.cubicTo(5976 * _xScaling,2407 * _yScaling,6067 * _xScaling,2425 * _yScaling,6081 * _xScaling,2427 * _yScaling,);
    path.cubicTo(6102 * _xScaling,2431 * _yScaling,6113 * _xScaling,2424 * _yScaling,6137 * _xScaling,2393 * _yScaling,);
    path.cubicTo(6188 * _xScaling,2329 * _yScaling,6257 * _xScaling,2209 * _yScaling,6289 * _xScaling,2129 * _yScaling,);
    path.cubicTo(6349 * _xScaling,1976 * _yScaling,6350 * _xScaling,1962 * _yScaling,6350 * _xScaling,1144 * _yScaling,);
    path.cubicTo(6350 * _xScaling,1144 * _yScaling,6350 * _xScaling,400 * _yScaling,6350 * _xScaling,400 * _yScaling,);
    path.cubicTo(6350 * _xScaling,400 * _yScaling,6381 * _xScaling,400 * _yScaling,6381 * _xScaling,400 * _yScaling,);
    path.cubicTo(6476 * _xScaling,400 * _yScaling,6914 * _xScaling,499 * _yScaling,7195 * _xScaling,585 * _yScaling,);
    path.cubicTo(7581 * _xScaling,702 * _yScaling,8138 * _xScaling,936 * _yScaling,8392 * _xScaling,1088 * _yScaling,);
    path.cubicTo(8392 * _xScaling,1088 * _yScaling,8471 * _xScaling,1134 * _yScaling,8471 * _xScaling,1134 * _yScaling,);
    path.cubicTo(8471 * _xScaling,1134 * _yScaling,8465 * _xScaling,1190 * _yScaling,8465 * _xScaling,1190 * _yScaling,);
    path.cubicTo(8437 * _xScaling,1444 * _yScaling,8328 * _xScaling,1691 * _yScaling,8143 * _xScaling,1920 * _yScaling,);
    path.cubicTo(8071 * _xScaling,2009 * _yScaling,7893 * _xScaling,2183 * _yScaling,7795 * _xScaling,2262 * _yScaling,);
    path.cubicTo(7616 * _xScaling,2404 * _yScaling,7357 * _xScaling,2562 * _yScaling,7127 * _xScaling,2670 * _yScaling,);
    path.cubicTo(7063 * _xScaling,2700 * _yScaling,7010 * _xScaling,2728 * _yScaling,7010 * _xScaling,2731 * _yScaling,);
    path.cubicTo(7010 * _xScaling,2734 * _yScaling,7052 * _xScaling,2756 * _yScaling,7103 * _xScaling,2779 * _yScaling,);
    path.cubicTo(7407 * _xScaling,2918 * _yScaling,7743 * _xScaling,3140 * _yScaling,7957 * _xScaling,3344 * _yScaling,);
    path.cubicTo(8257 * _xScaling,3630 * _yScaling,8423 * _xScaling,3935 * _yScaling,8464 * _xScaling,4275 * _yScaling,);
    path.cubicTo(8464 * _xScaling,4275 * _yScaling,8470 * _xScaling,4325 * _yScaling,8470 * _xScaling,4325 * _yScaling,);
    path.cubicTo(8470 * _xScaling,4325 * _yScaling,8412 * _xScaling,4361 * _yScaling,8412 * _xScaling,4361 * _yScaling,);
    path.cubicTo(8167 * _xScaling,4517 * _yScaling,7591 * _xScaling,4758 * _yScaling,7150 * _xScaling,4890 * _yScaling,);
    path.cubicTo(6909 * _xScaling,4962 * _yScaling,6577 * _xScaling,5039 * _yScaling,6393 * _xScaling,5064 * _yScaling,);
    path.cubicTo(6393 * _xScaling,5064 * _yScaling,6351 * _xScaling,5070 * _yScaling,6351 * _xScaling,5070 * _yScaling,);
    path.cubicTo(6351 * _xScaling,5070 * _yScaling,6348 * _xScaling,4293 * _yScaling,6348 * _xScaling,4293 * _yScaling,);
    path.cubicTo(6345 * _xScaling,3520 * _yScaling,6345 * _xScaling,3515 * _yScaling,6322 * _xScaling,3435 * _yScaling,);
    path.cubicTo(6294 * _xScaling,3334 * _yScaling,6227 * _xScaling,3196 * _yScaling,6160 * _xScaling,3102 * _yScaling,);
    path.cubicTo(6118 * _xScaling,3042 * _yScaling,6104 * _xScaling,3029 * _yScaling,6087 * _xScaling,3033 * _yScaling,);
    path.cubicTo(5495 * _xScaling,3164 * _yScaling,5063 * _xScaling,3211 * _yScaling,4465 * _xScaling,3211 * _yScaling,);
    path.cubicTo(4295 * _xScaling,3210 * _yScaling,4144 * _xScaling,3208 * _yScaling,4130 * _xScaling,3206 * _yScaling,);
    path.cubicTo(4116 * _xScaling,3204 * _yScaling,4056 * _xScaling,3199 * _yScaling,3995 * _xScaling,3195 * _yScaling,);
    path.cubicTo(3677 * _xScaling,3176 * _yScaling,3261 * _xScaling,3115 * _yScaling,2903 * _xScaling,3033 * _yScaling,);
    path.cubicTo(2860 * _xScaling,3023 * _yScaling,2726 * _xScaling,3248 * _yScaling,2673 * _xScaling,3417 * _yScaling,);
    path.cubicTo(2673 * _xScaling,3417 * _yScaling,2645 * _xScaling,3505 * _yScaling,2645 * _xScaling,3505 * _yScaling,);
    path.cubicTo(2645 * _xScaling,3505 * _yScaling,2642 * _xScaling,4288 * _yScaling,2642 * _xScaling,4288 * _yScaling,);
    path.cubicTo(2640 * _xScaling,4892 * _yScaling,2636 * _xScaling,5070 * _yScaling,2627 * _xScaling,5069 * _yScaling,);
    path.cubicTo(2620 * _xScaling,5069 * _yScaling,2568 * _xScaling,5060 * _yScaling,2510 * _xScaling,5050 * _yScaling,);
    path.cubicTo(2510 * _xScaling,5050 * _yScaling,2510 * _xScaling,5050 * _yScaling,2510 * _xScaling,5050 * _yScaling,);
    path.lineTo(4775 * _xScaling,3039 * _yScaling);
    path.cubicTo(5025 * _xScaling,3017 * _yScaling,5287 * _xScaling,2954 * _yScaling,5498 * _xScaling,2865 * _yScaling,);
    path.cubicTo(5606 * _xScaling,2819 * _yScaling,5750 * _xScaling,2742 * _yScaling,5750 * _xScaling,2729 * _yScaling,);
    path.cubicTo(5750 * _xScaling,2716 * _yScaling,5471 * _xScaling,2583 * _yScaling,5375 * _xScaling,2550 * _yScaling,);
    path.cubicTo(5237 * _xScaling,2502 * _yScaling,5076 * _xScaling,2463 * _yScaling,4918 * _xScaling,2439 * _yScaling,);
    path.cubicTo(4726 * _xScaling,2409 * _yScaling,4302 * _xScaling,2406 * _yScaling,4110 * _xScaling,2433 * _yScaling,);
    path.cubicTo(3949 * _xScaling,2456 * _yScaling,3791 * _xScaling,2491 * _yScaling,3654 * _xScaling,2536 * _yScaling,);
    path.cubicTo(3547 * _xScaling,2571 * _yScaling,3240 * _xScaling,2714 * _yScaling,3240 * _xScaling,2728 * _yScaling,);
    path.cubicTo(3240 * _xScaling,2739 * _yScaling,3367 * _xScaling,2809 * _yScaling,3465 * _xScaling,2853 * _yScaling,);
    path.cubicTo(3683 * _xScaling,2950 * _yScaling,3953 * _xScaling,3017 * _yScaling,4215 * _xScaling,3039 * _yScaling,);
    path.cubicTo(4352 * _xScaling,3051 * _yScaling,4641 * _xScaling,3051 * _yScaling,4775 * _xScaling,3039 * _yScaling,);
    path.cubicTo(4775 * _xScaling,3039 * _yScaling,4775 * _xScaling,3039 * _yScaling,4775 * _xScaling,3039 * _yScaling,);
    return path;
  }*/